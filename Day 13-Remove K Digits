#Solution 1:

class Solution {
public:
    string removeKdigits(string num, int k) {
        if(k==num.length())
            return "0";
        int i=0;
        while(k>0){
            i=(i>0)?(i-1):0;
             while((i<num.length()-1) && (num[i]<=num[i+1]))
                 i++;
            num.erase(num.begin()+i);
            k--;
             
        }
        auto non_zero=num.find_first_not_of("0");
        num.erase(0,non_zero);
        if(num.length()==0)
            return "0";
        return num;
       
    }
};

#Solution 2:

class Solution {
public:
    string removeKdigits(string num, int k) {
         
          if(k>=num.size())  return "0";
        
          int l=k-num.size();
          stack<char> st;
        
          int i=0;
        
          while(k and i<num.size())
          {
                if(st.empty())
                    st.push(num[i++]);
                else 
                {
                     while(k and !st.empty() and st.top()-'0'>num[i]-'0')
                         st.pop(),k--;
                    
                     st.push(num[i++]);
                }
                    
          }
          string res="";
          if(k)
          {
               while(k--) st.pop();  
          }
        
          while(!st.empty())
          {
              res=st.top()+res; st.pop(); 
              
              
          }
          res+=num.substr(i);
          i=0;
          while(i<res.size() and res[i]=='0')
              i++;
        
         res=res.substr(i);
          if(res.empty())return "0";
          return res;
       
    }
};
